/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPoolDataProviderInterface extends ethers.utils.Interface {
  functions: {
    "getReservesData(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReservesData",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReservesData",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPoolDataProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPoolDataProviderInterface;

  functions: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          number,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          string
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: number;
          isActive: boolean;
          isFreezed: boolean;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          baseLTVasCollateral: BigNumber;
          averageStableBorrowRate: BigNumber;
          liquidityIndex: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          variableBorrowIndex: BigNumber;
          variableBorrowRate: BigNumber;
          availableLiquidity: BigNumber;
          stableBorrowRate: BigNumber;
          liquidityRate: BigNumber;
          totalBorrowsStable: BigNumber;
          totalBorrowsVariable: BigNumber;
          totalLiquidity: BigNumber;
          utilizationRate: BigNumber;
          lastUpdateTimestamp: number;
          priceInEth: BigNumber;
          aTokenAddress: string;
        })[],
        BigNumber
      ]
    >;

    "getReservesData(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          number,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          string
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: number;
          isActive: boolean;
          isFreezed: boolean;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          baseLTVasCollateral: BigNumber;
          averageStableBorrowRate: BigNumber;
          liquidityIndex: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          variableBorrowIndex: BigNumber;
          variableBorrowRate: BigNumber;
          availableLiquidity: BigNumber;
          stableBorrowRate: BigNumber;
          liquidityRate: BigNumber;
          totalBorrowsStable: BigNumber;
          totalBorrowsVariable: BigNumber;
          totalLiquidity: BigNumber;
          utilizationRate: BigNumber;
          lastUpdateTimestamp: number;
          priceInEth: BigNumber;
          aTokenAddress: string;
        })[],
        BigNumber
      ]
    >;
  };

  getReservesData(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        string,
        string,
        number,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string
      ] & {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: number;
        isActive: boolean;
        isFreezed: boolean;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        baseLTVasCollateral: BigNumber;
        averageStableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        variableBorrowIndex: BigNumber;
        variableBorrowRate: BigNumber;
        availableLiquidity: BigNumber;
        stableBorrowRate: BigNumber;
        liquidityRate: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        totalLiquidity: BigNumber;
        utilizationRate: BigNumber;
        lastUpdateTimestamp: number;
        priceInEth: BigNumber;
        aTokenAddress: string;
      })[],
      BigNumber
    ]
  >;

  "getReservesData(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        string,
        string,
        number,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string
      ] & {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: number;
        isActive: boolean;
        isFreezed: boolean;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        baseLTVasCollateral: BigNumber;
        averageStableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        variableBorrowIndex: BigNumber;
        variableBorrowRate: BigNumber;
        availableLiquidity: BigNumber;
        stableBorrowRate: BigNumber;
        liquidityRate: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        totalLiquidity: BigNumber;
        utilizationRate: BigNumber;
        lastUpdateTimestamp: number;
        priceInEth: BigNumber;
        aTokenAddress: string;
      })[],
      BigNumber
    ]
  >;

  callStatic: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          number,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          string
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: number;
          isActive: boolean;
          isFreezed: boolean;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          baseLTVasCollateral: BigNumber;
          averageStableBorrowRate: BigNumber;
          liquidityIndex: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          variableBorrowIndex: BigNumber;
          variableBorrowRate: BigNumber;
          availableLiquidity: BigNumber;
          stableBorrowRate: BigNumber;
          liquidityRate: BigNumber;
          totalBorrowsStable: BigNumber;
          totalBorrowsVariable: BigNumber;
          totalLiquidity: BigNumber;
          utilizationRate: BigNumber;
          lastUpdateTimestamp: number;
          priceInEth: BigNumber;
          aTokenAddress: string;
        })[],
        BigNumber
      ]
    >;

    "getReservesData(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          number,
          boolean,
          boolean,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          string
        ] & {
          underlyingAsset: string;
          name: string;
          symbol: string;
          decimals: number;
          isActive: boolean;
          isFreezed: boolean;
          usageAsCollateralEnabled: boolean;
          borrowingEnabled: boolean;
          stableBorrowRateEnabled: boolean;
          baseLTVasCollateral: BigNumber;
          averageStableBorrowRate: BigNumber;
          liquidityIndex: BigNumber;
          reserveLiquidationThreshold: BigNumber;
          reserveLiquidationBonus: BigNumber;
          variableBorrowIndex: BigNumber;
          variableBorrowRate: BigNumber;
          availableLiquidity: BigNumber;
          stableBorrowRate: BigNumber;
          liquidityRate: BigNumber;
          totalBorrowsStable: BigNumber;
          totalBorrowsVariable: BigNumber;
          totalLiquidity: BigNumber;
          utilizationRate: BigNumber;
          lastUpdateTimestamp: number;
          priceInEth: BigNumber;
          aTokenAddress: string;
        })[],
        BigNumber
      ]
    >;
  };

  filters: {};

  estimateGas: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReservesData(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReservesData(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
